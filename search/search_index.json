{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MedConB Client","text":"<p>This library provides a Python interface to the MedConB API. With this you can easily retrieve whole codelists from MedConB.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install (and update) it into your python environment by running:</p> <pre><code>pip install --force-reinstall -U medconb-client\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use it, you need to create a client:</p> <pre><code>from medconb_client import Client\n\nendpoint = \"https://api.medconb.example.com/graphql/\"\ntoken = get_token()\n\nclient = Client(endpoint, token)\n</code></pre> <p>with that client you can now interact with the API.</p>"},{"location":"#get-a-codelist-by-name","title":"Get a codelist by name","text":"<pre><code>codelist = client.get_codelist_by_name(\n    codelist_name=\"Coronary Artery Disease\",\n    codelist_collection_name=\"Pacific AF [Sample]\",\n)\n</code></pre> <pre><code>codelist = client.get_codelist_by_name(\n    codelist_name=\"Coronary Artery Disease\",\n    phenotype_collection_name=\"[Sample] PACIFIC AF ECA\",\n    phenotype_name=\"Coronary Artery Disease\",\n)\n</code></pre>"},{"location":"#get-a-codelist-by-id","title":"Get a codelist by id","text":"<pre><code>codelist = client.get_codelist(\n    codelist_id=\"9c4ad312-3008-4d95-9b16-6f9b21ec1ad9\"\n)\n</code></pre>"},{"location":"#retrieve-collections-in-your-workspace","title":"Retrieve collections in your workspace","text":"<pre><code>workspace_info = client.get_workspace()\n\ncollection_info = next(\n    collection\n    for collection in workspace_info.collections\n    if collection.itemType == \"Codelist\"\n)\n\ncodelist = client.get_codelist(collection_info.items[0].id)\n</code></pre> <p>For more information, also see our Examples Page.</p>"},{"location":"examples/","title":"Examples / How-To","text":""},{"location":"examples/#overview","title":"Overview","text":"<p>Let's look at how to retrieve a codelist from MedConB with Python.</p> <p>The general process is:</p> <ol> <li>Create a <code>Client</code></li> <li>Call <code>get_codelist</code> to retrieve a codelist by ID</li> </ol> <p>You will get the Codelist as a <code>Codelist</code> object. If you prefer pandas, you can use <code>codelist.codesets.toPandas()</code>.</p>"},{"location":"examples/#create-a-client","title":"Create a Client","text":"<p>Usually, the MedConB API will be protected, so you need to supply a Bearer token to the requests to the API. As the way to retrieve a token can vary widely, we assume there is a function <code>get_token</code> that you can call to get a valid token.</p> <pre><code>from medconb_client import Client\n\nendpoint = \"https://api.medconb.example.com/graphql/\"\ntoken = get_token()\n\nclient = Client(endpoint, token)\n</code></pre>"},{"location":"examples/#retrieve-a-codelist-by-id","title":"Retrieve a Codelist by ID","text":"<p>To retrieve a codelist, use the <code>get_codelist</code> method:</p> <pre><code>codelist = client.get_codelist(\n    codelist_id=\"9c4ad312-3008-4d95-9b16-6f9b21ec1ad9\"\n)\n\nprint(f\"\"\"\nCodelist ID: {codelist.id}\nCodelist Name: {codelist.name}\nCodelist Description: {codelist.description}\n\nIt contains codes from the following ontologies:\n{\", \".join([codeset.ontology for codeset in codelist.codesets])}\n\"\"\")\n\n# Output:\n# Codelist ID: 428390b8-2d78-42cf-bc2c-7175a99514c9\n# Codelist Name: Coronary Artery Disease\n# Codelist Description: None\n#\n# It contains codes from the following ontologies:\n# ICD-10-CM, ICD-9-CM\n</code></pre> <p>The codelist is an object with id, name and description.</p> <p>To access the codesets, use <code>codelist.codesets</code>. This is a list of <code>Codeset</code> objects, each storing the codes from a specific ontology.</p> <p>Each codeset has the attributes <code>ontology</code> and <code>codes</code>. The latter is a list of 2-tuples, where the first entry is the code and the second the description of the code.</p> <p>Note</p> <p>The descriptions are empy by default and only filled when using <code>with_description=True</code> on <code>get_codelist</code>. See more below at Retrieve descriptions of codes</p>"},{"location":"examples/#retrieve-a-codelist-from-a-collection-or-phenotype-by-name","title":"Retrieve a Codelist from a Collection or Phenotype by name","text":"<p>You can also get a codelist by name. As the name is not unique in the whole workspace, you have to specify the location of the codelist by e.g. specifying the name of the collection it is in.</p> <pre><code>codelist = client.get_codelist_by_name(\n    codelist_name=\"Coronary Artery Disease\",\n    codelist_collection_name=\"Pacific AF [Sample]\",\n)\n</code></pre> <p>If the codelist is part of a Phenotype, use the name of the phenotype and the name of the phenotype collection:</p> <pre><code>codelist = client.get_codelist_by_name(\n    codelist_name=\"Coronary Artery Disease\",\n    phenotype_collection_name=\"[Sample] PACIFIC AF ECA\",\n    phenotype_name=\"Coronary Artery Disease\",\n)\n</code></pre>"},{"location":"examples/#list-all-collections-in-your-workspace","title":"List all collections in your workspace","text":"<p>You can get an overview of your workspace by using <code>client.get_workspace</code>. The result will be an object of <code>Workspace</code>, containing all collectons (own and shared) with stub information (id and name) on the contained codelists/phenotypes.</p> <pre><code>workspace_info = client.get_workspace()\n\n# get first collection of codelists (skip phenotypes)\ncollection_info = next(\n    collection\n    for collection in workspace_info.collections\n    if collection.itemType == \"Codelist\"\n)\n\ncodelist = client.get_codelist(collection_info.items[0].id)\n</code></pre>"},{"location":"examples/#search-the-public-marketplace-for-codelists","title":"Search the public marketplace for codelists","text":"<p>The Medical Concept Builder has a marketplace where you can find all collections and phenotypes that were made available to all users. With <code>client.search_public_codelists</code> you can search it for codelists.</p> <pre><code>found_codelists = client.search_public_codelists(query=\"name:'blood'\")\n</code></pre> query string description <code>blood</code> searches name and description for any (substring-)match of \"blood\" <code>name:blood</code> searches name for any (substring-)match of \"blood\" <code>name:'blood'</code> finds \"blood infusion\" but not \"Bloody Nose\""},{"location":"examples/#a-codelist-as-a-pandas-dataframe","title":"A codelist as a Pandas DataFrame","text":"<p>You can easily convert a codelist into a Pandas DataFrame with the columns \"ontology\", \"code\", \"description\":</p> <pre><code>codelist.codesets.to_pandas()\n</code></pre> codelist as a Pandas DataFrame"},{"location":"examples/#retrieve-descriptions-of-codes","title":"Retrieve descriptions of codes","text":"<p>If required, you can also retrieve the descriptive text for every code in the codelist. This is only possible when using <code>get_codelist</code>.</p> <p>Long execution time for large data retrieval</p> <p>When you retrieve the description with the codes, the retrieval will be considerably longer. Be careful when you use this functionality. This is especially crucial when the codelist you want to retrieve is very large (&gt;1000 codes).</p> <p>To retrieve the descriptions along with the codes, pass the parameter <code>with_description</code>:</p> <pre><code>codelist = client.get_codelist(codelist_id, with_description=True)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>This package is not yet published to pipy.</p> <p>You can install (and update) it into your python environment by running:</p> <pre><code>pip install --force-reinstall -U medconb-client\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Bayer AG\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> medconb_client</li> </ul>"},{"location":"reference/medconb_client/","title":"medconb_client","text":""},{"location":"reference/medconb_client/#medconb_client.Client","title":"<code>Client(endpoint, token)</code>","text":"<p>Creates a new MedConB client.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>URL of the MedConB API. E.g. https://api.medconb.example.com/graphql/</p> required <code>token</code> <code>str</code> <p>Authorization token.</p> required Source code in <code>medconb_client.py</code> <pre><code>def __init__(\n    self,\n    endpoint: str,\n    token: str,\n):\n    \"\"\"\n    Creates a new MedConB client.\n\n    Args:\n        endpoint (str): URL of the MedConB API. E.g. https://api.medconb.example.com/graphql/\n        token (str): Authorization token.\n    \"\"\"\n    self.endpoint = endpoint\n    self.token = token\n    self.transport = RequestsHTTPTransport(\n        url=self.endpoint,\n        headers={\"Authorization\": f\"Bearer {self.token}\"},\n        retries=3,\n    )\n    self.client = GQLClient(\n        transport=self.transport,\n        fetch_schema_from_transport=True,\n        execute_timeout=30,\n    )\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Client.get_codelist","title":"<code>get_codelist(codelist_id, with_description=False)</code>","text":"<p>Retrieves the codelist by ID from the API and parses the data into the python data structures.</p> <p>It mirrors the logic of the export and current understanding of transient codesets: Transient codesets are the current version and should be used if they exist. (At some point the API might change to reflect that default behaviour better as it might be a bit confusing atm.)</p> Source code in <code>medconb_client.py</code> <pre><code>def get_codelist(\n    self, codelist_id: str, with_description: bool = False\n) -&gt; \"Codelist\":\n    \"\"\"\n    Retrieves the codelist by ID from the API and parses\n    the data into the python data structures.\n\n    It mirrors the logic of the export and current understanding\n    of transient codesets:\n    Transient codesets are the current version and should be used\n    if they exist. (At some point the API might change to reflect\n    that default behaviour better as it might be a bit confusing\n    atm.)\n    \"\"\"\n    query = gql(\n        _GQL_QUERY_CODELST\n        if with_description\n        else _GQL_QUERY_CODELST_NO_DESCRIPTION\n    )\n\n    with self.client as session:\n        result = session.execute(query, variable_values={\"codelistID\": codelist_id})\n        codelist_data = result[\"codelist\"]\n\n        css = codelist_data[\"codesets\"]\n        tcss = codelist_data[\"transientCodesets\"]\n        codesets: Codesets = Codesets()\n\n        if tcss is None:\n            tcss = css\n\n        for cs in tcss:\n            codesets.append(\n                Codeset(\n                    ontology=cs[\"ontology\"][\"name\"],\n                    codes=[\n                        (\n                            c[\"code\"],\n                            c[\"description\"] if with_description else \"\",\n                        )\n                        for c in cs[\"codes\"]\n                    ],\n                )\n            )\n\n        return Codelist(\n            id=codelist_data[\"id\"],\n            name=codelist_data[\"name\"],\n            description=codelist_data.get(\"description\"),\n            codesets=codesets,\n        )\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Client.get_codelist_by_name","title":"<code>get_codelist_by_name(*, codelist_name, codelist_collection_name=None, phenotype_collection_name=None, phenotype_name=None)</code>","text":"<pre><code>get_codelist_by_name(\n    *, codelist_name: str, codelist_collection_name: str\n)\n</code></pre><pre><code>get_codelist_by_name(\n    *,\n    codelist_name: str,\n    phenotype_collection_name: str,\n    phenotype_name: str\n)\n</code></pre> <p>Retrieves a Codelist by its name.</p> <p>Use the arguments <code>codelist_name</code> with either:</p> <ul> <li><code>codelist_collection_name</code> or</li> <li><code>phenotype_collection_name</code> and <code>phenotype_name</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>codelist_name</code> <code>str</code> <p>Name of the codelist</p> required <code>codelist_collection_name</code> <code>str</code> <p>Name of the codelist collection</p> <code>None</code> <code>phenotype_collection_name</code> <code>str</code> <p>Name of the phenotype collection</p> <code>None</code> <code>phenotype_name</code> <code>str</code> <p>Name of the phenotype</p> <code>None</code> Source code in <code>medconb_client.py</code> <pre><code>def get_codelist_by_name(\n    self,\n    *,\n    codelist_name,\n    codelist_collection_name=None,\n    phenotype_collection_name=None,\n    phenotype_name=None,\n) -&gt; \"Codelist\":\n    \"\"\"\n    Retrieves a Codelist by its name.\n\n    Use the arguments `codelist_name` with either:\n\n    - `codelist_collection_name` or\n    - `phenotype_collection_name` and `phenotype_name`\n\n    Args:\n        codelist_name (str): Name of the codelist\n        codelist_collection_name (str, optional): Name of the codelist collection\n        phenotype_collection_name (str, optional): Name of the phenotype collection\n        phenotype_name (str, optional): Name of the phenotype\n    \"\"\"\n    # codelist_collection_name = kwargs.get(\"codelist_collection_name\")\n    # codelist_name = kwargs.get(\"codelist_name\")\n    # phenotype_collection_name = kwargs.get(\"phenotype_collection_name\")\n    # phenotype_name = kwargs.get(\"phenotype_name\")\n\n    if codelist_name is None:\n        raise ValueError(\"Invalid arguments: codelist_name is required\")\n\n    mode = None\n\n    if codelist_collection_name is not None:\n        mode = \"collection\"\n    elif phenotype_collection_name is not None and phenotype_name is not None:\n        mode = \"phenotype\"\n    else:\n        raise ValueError(\n            \"Invalid arguments: Specify either codelist_collection_name or\"\n            \" phenotype_collection_name and phenotype_name\"\n        )\n\n    candidates = self._search_codelist(codelist_name)\n    matches = []\n\n    if mode == \"collection\":\n        matches = self._filter_codelist_in_collection(\n            candidates, codelist_collection_name\n        )\n    else:\n        matches = self._filter_codelist_in_phenotype(\n            candidates, phenotype_collection_name, phenotype_name\n        )\n\n    if len(matches) &gt; 1:\n        raise ValueError(\n            \"The codelist can not be retrieved because the name is ambiguous\"\n        )\n\n    if len(matches) == 0:\n        raise ValueError(\n            \"The codelist can not be retrieved because it was not found\"\n        )\n\n    return self.get_codelist(matches[0])\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Client.get_workspace","title":"<code>get_workspace()</code>","text":"<p>Retrieves a listing of all collections and their codelists/pheontypes within the workspace.</p> <p>Returns:</p> Name Type Description <code>Workspace</code> <code>Workspace</code> <p>Workspace object containing id and name of all codelists and phenotypes.</p> Example <p>For a detailed example, see Examples. <pre><code>&gt;&gt;&gt; workspace = client.get_workspace()\n&gt;&gt;&gt; print(workspace)\nWorkspace(\n    collections=[\n        Collection(\n            id=\"ff755b3a-8f93-43a2-bb8f-2ee435e28938\",\n            name=\"ATTR CM Library\",\n            description=\"...\",\n            referenceID=\"...\",\n            itemType=\"Codelist\",\n            items=[\n                CodelistInfo(id=\"...\", name=\"...\"),\n                CodelistInfo(id=\"...\", name=\"...\"),\n                ...\n            ],\n            ownerID=\"...\",\n            locked=False,\n            visibility=\"Private\",\n        ),\n        ...\n    ],\n    shared=[\n        Collection(...),\n    ],\n)\n</code></pre></p> Source code in <code>medconb_client.py</code> <pre><code>def get_workspace(self) -&gt; \"Workspace\":\n    \"\"\"\n    Retrieves a listing of all collections and their codelists/pheontypes\n    within the workspace.\n\n    Returns:\n        Workspace: Workspace object containing id and name of all codelists and phenotypes.\n\n    Example:\n        For a detailed example, see [Examples](/examples#list-all-collections-in-your-workspace).\n        ```ipython\n        &gt;&gt;&gt; workspace = client.get_workspace()\n        &gt;&gt;&gt; print(workspace)\n        Workspace(\n            collections=[\n                Collection(\n                    id=\"ff755b3a-8f93-43a2-bb8f-2ee435e28938\",\n                    name=\"ATTR CM Library\",\n                    description=\"...\",\n                    referenceID=\"...\",\n                    itemType=\"Codelist\",\n                    items=[\n                        CodelistInfo(id=\"...\", name=\"...\"),\n                        CodelistInfo(id=\"...\", name=\"...\"),\n                        ...\n                    ],\n                    ownerID=\"...\",\n                    locked=False,\n                    visibility=\"Private\",\n                ),\n                ...\n            ],\n            shared=[\n                Collection(...),\n            ],\n        )\n        ```\n    \"\"\"\n    query = gql(_GQL_QUERY_WORKSPACE)\n\n    with self.client as session:\n        result = session.execute(query)\n        workspace_data = result[\"self\"][\"workspace\"]\n        return Workspace(**workspace_data)\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Client.search_public_codelists","title":"<code>search_public_codelists(query)</code>","text":"<p>Searches the public marketplace for codelists.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>A query string similar to a google search.</p> required <p>Returns:</p> Type Description <code>list[CodelistInfo]</code> <p>list[CodelistInfo]: List of codelists that match the search.</p> <p>All search is case-insensitive.</p> <p>The search by default searches name and description for the search terms. By using \"name:search-term\" you can search a specific field (name in this case). To only consider exact matches of a word, use \"name:'blood'\". This will find results like \"Blood Infusion\", but not \"bloody nose\".</p> Source code in <code>medconb_client.py</code> <pre><code>def search_public_codelists(self, query: str) -&gt; list[CodelistInfo]:\n    \"\"\"\n    Searches the public marketplace for codelists.\n\n    Args:\n        query (str): A query string similar to a google search.\n\n    Returns:\n        list[CodelistInfo]: List of codelists that match the search.\n\n    All search is case-insensitive.\n\n    The search by default searches name and description for the\n    search terms. By using \"name:search-term\" you can search\n    a specific field (name in this case).\n    To only consider exact matches of a word, use\n    \"name:'blood'\". This will find results like \"Blood Infusion\",\n    but not \"bloody nose\".\n    \"\"\"\n    gql_query = gql(_GQL_QUERY_SEARCH_CODELIST)\n\n    query_str = f\"{query} visibility:'public'\"\n\n    with self.client as session:\n        result = session.execute(gql_query, variable_values={\"query\": query_str})\n        items = result[\"searchEntities\"][\"items\"]\n        res = [CodelistInfo(id=i[\"id\"], name=i[\"name\"]) for i in items]\n        return res\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Codelist","title":"<code>Codelist(id, name, description, codesets)</code>  <code>dataclass</code>","text":"<p>Codelist is a codelist as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>ID of the codelist.</p> <code>name</code> <code>str</code> <p>Name of the codelist.</p> <code>description</code> <code>str</code> <p>Description of the codelist.</p> <code>codesets</code> <code>Codesets</code> <p>List of codesets in the codelist.</p>"},{"location":"reference/medconb_client/#medconb_client.Codelist.to_pandas","title":"<code>to_pandas()</code>","text":"<p>Convert the codelists codesets to a pandas DataFrame.</p> <p>Returns:</p> Type Description <p>pd.DataFrame: The codesets as a DataFrame.</p> Source code in <code>medconb_client.py</code> <pre><code>def to_pandas(self):\n    \"\"\"\n    Convert the codelists codesets to a pandas DataFrame.\n\n    Returns:\n        pd.DataFrame: The codesets as a DataFrame.\n    \"\"\"\n    return self.codesets.to_pandas()\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.CodelistInfo","title":"<code>CodelistInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Basic information on a codelist as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>ID of the codelist.</p> <code>name</code> <code>str</code> <p>Name of the codelist.</p>"},{"location":"reference/medconb_client/#medconb_client.Codeset","title":"<code>Codeset(ontology, codes)</code>  <code>dataclass</code>","text":"<p>Codeset is a codeset as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>ontology</code> <code>str</code> <p>Ontology which the codes belong to</p> <code>codes</code> <code>list[tuple[str, str]]</code> <p>List of codes, each represented as a tuple of code and description</p>"},{"location":"reference/medconb_client/#medconb_client.Codesets","title":"<code>Codesets</code>","text":"<p>               Bases: <code>UserList['Codeset']</code></p> <p>Codesets is a list of codesets as defined in MedConB.</p> <p>It's just a thin wrapper, so we can offer <code>to_pandas</code>.</p>"},{"location":"reference/medconb_client/#medconb_client.Codesets.to_pandas","title":"<code>to_pandas()</code>","text":"<p>Convert the codesets to a pandas DataFrame.</p> <p>Returns:</p> Type Description <p>pd.DataFrame: The codesets as a DataFrame.</p> Source code in <code>medconb_client.py</code> <pre><code>def to_pandas(self):\n    \"\"\"\n    Convert the codesets to a pandas DataFrame.\n\n    Returns:\n        pd.DataFrame: The codesets as a DataFrame.\n    \"\"\"\n    rows = []\n    for codeset in self.data:\n        for code, description in codeset.codes:\n            rows.append(\n                {\n                    \"ontology\": codeset.ontology,\n                    \"code\": code,\n                    \"description\": description,\n                }\n            )\n\n    return pd.DataFrame(rows)\n</code></pre>"},{"location":"reference/medconb_client/#medconb_client.Collection","title":"<code>Collection</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Collection as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>ID of the collection.</p> <code>name</code> <code>str</code> <p>Name of the collection.</p> <code>description</code> <code>str</code> <p>Description of the collection.</p> <code>referenceID</code> <code>str</code> <p>ID of the collection this one was copied from.</p> <code>itemType</code> <code>str</code> <p>Type of the collections items.</p> <code>items</code> <code>list[CodelistInfo | PhenotypeInfo]</code> <p>Basic information on the items in this collection.</p> <code>ownerID</code> <code>str</code> <p>ID of the owner of the collection.</p> <code>locked</code> <code>bool</code> <p>Whether the collection is locked.</p> <code>visibility</code> <code>str</code> <p>Visibility of the collection. Can be \"own\", \"shared\" or \"public\".</p>"},{"location":"reference/medconb_client/#medconb_client.PhenotypeInfo","title":"<code>PhenotypeInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Basic information on a phenotype as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>ID of the phenotype.</p> <code>name</code> <code>str</code> <p>Name of the phenotype.</p>"},{"location":"reference/medconb_client/#medconb_client.SearchMatchingType","title":"<code>SearchMatchingType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Types of matching to use when searching the public marketplace.</p> <p>Enum Members:</p> Enum Name Description <code>EXACT</code> Search for an exact match. <code>SUBSTRING</code> Search for a substring match."},{"location":"reference/medconb_client/#medconb_client.Workspace","title":"<code>Workspace</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Workspace as defined in MedConB.</p> <p>Attributes:</p> Name Type Description <code>collections</code> <code>list[Collection]</code> <p>List of collections in the workspace owned by the user.</p> <code>shared</code> <code>list[Collection]</code> <p>List of collections in the workspace shared with the user.</p>"}]}